{
  "name": "createDateField",
  "description": "Creates a Payload CMS 3.0 DateField configuration\n\nExample:\n```typescript\n{\n  name: 'dateField',\n  type: 'date',\n  required: true,\n  label: 'Date Field',\n  // Custom validation example\n  validate: (value, { siblingData, operation }) => {\n    // Validation logic based on the value, sibling data, or operation\n    if (operation === 'create' && !value) {\n      return 'This field is required for new records';\n    }\n    return true;\n  }\n}\n```",
  "inputSchema": {
    "type": "object",
    "format": "date-time",
    "description": "Date string (ISO format)",
    "properties": {
      "name": {
        "type": "string",
        "description": "The name of the field, used as the property name in the database"
      },
      "type": {
        "type": "string",
        "enum": [
          "datefield"
        ],
        "description": "The type of field"
      },
      "label": {
        "type": "string",
        "description": "The label shown in the admin UI"
      },
      "required": {
        "type": "boolean",
        "description": "Whether this field is required"
      },
      "defaultValue": {
        "type": "string",
        "description": "Default date value"
      },
      "validate": {
        "type": "string",
        "description": "Custom validation function that returns true if valid or an error message string if invalid"
      }
    },
    "required": [
      "name",
      "type"
    ]
  },
  "template": "{\n  name: '{name}', // Database field name\n  type: 'date',\n  label: 'Date Field', // Label shown in the admin UI\n  required: true,\n  admin: {\n    date: {\n      pickerAppearance: 'dayAndTime', // 'dayOnly', 'timeOnly', or 'dayAndTime'\n    },\n  },\n  // Optional: Add custom validation\n  validate: (value) => {\n    const date = new Date(value);\n    if (date < new Date()) {\n      return 'Date must be in the future';\n    }\n    return true; // Return true if valid\n  },\n}"
}