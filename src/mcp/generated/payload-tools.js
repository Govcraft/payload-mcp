
/**
 * Auto-generated Payload CMS tools for MCP
 * DO NOT EDIT DIRECTLY - Generated by generate-tools.ts
 */
import { logger } from '../../utils/logger.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Read all tool files from the tools directory
const toolsDir = path.join(__dirname, 'tools');
logger.info(`Loading tools from directory: ${toolsDir}`);

let payloadTools = [];
let toolsMap = {};

try {
  // Check if the directory exists
  if (!fs.existsSync(toolsDir)) {
    logger.error(`Tools directory does not exist: ${toolsDir}`);
    throw new Error(`Tools directory does not exist: ${toolsDir}`);
  }

  // List all files in the directory
  const allFiles = fs.readdirSync(toolsDir);
  logger.info(`Found ${allFiles.length} files in tools directory`);
  
  // Filter for JSON files
  const toolFiles = allFiles.filter(file => file.endsWith('.json'));
  logger.info(`Found ${toolFiles.length} JSON files in tools directory`);

  // Load each tool file
  payloadTools = toolFiles.map(file => {
    try {
      const filePath = path.join(toolsDir, file);
      logger.info(`Loading tool file: ${filePath}`);
      const fileContent = fs.readFileSync(filePath, 'utf8');
      const tool = JSON.parse(fileContent);
      return {
        name: tool.name,
        description: tool.description,
        parameters: tool.inputSchema,
        template: tool.template
      };
    } catch (error) {
      logger.error(`Error loading tool file ${file}:`, error);
      return null;
    }
  }).filter(Boolean); // Remove any null entries from failed loads

  logger.info(`Successfully loaded ${payloadTools.length} tools`);

  // For backward compatibility
  toolsMap = Object.fromEntries(
    payloadTools.map(tool => [tool.name, tool])
  );
} catch (error) {
  logger.error(`Error loading tools:`, error);
  // Provide empty arrays as fallbacks
  payloadTools = [];
  toolsMap = {};
}

export { payloadTools, toolsMap };
